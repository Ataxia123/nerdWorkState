{
	"nodes":[
		{"id":"eff88b538e17d20c","x":780,"y":-260,"width":400,"height":1060,"type":"file","file":"dbSchema.md"},
		{"id":"0c74271427445fba","type":"text","text":"EXCECUTE YOUR PURPOUSE ","x":-94,"y":-156,"width":250,"height":60},
		{"id":"bb2fd74cb8b13dbd","type":"text","text":"import AudioController from \"../components/aiu/AudioController\";\nimport { ChatMessage } from \"@/app/store/session\";\n// appTypes \n//\n// Entities\nexport type Roy = {\n    uid: string;\n    address: string;\n    count: number;\n    name: string;\n    age: number;\n    finances: Finances;\n    experiences: Experience[];\n    physicalAbility: PhysicalAbility;\n    emotionalState: EmotionalState;\n    spiritualBeliefs?: SpiritualBeliefs;\n    messages: ChatMessage[];\n    lifeEvents: LifeEvent[];\n    imageUrl: string;\n}\n\ninterface LifeEvent {\n    description: string;\n    date: Date;\n}\n\n// Attributes\ntype Finances = {\n    income: number;\n    savings: number;\n    debt: number;\n}\n\ntype Experience = {\n    description: string;\n    impactOnRoy: number;\n}\n\ntype PhysicalAbility = {\n    healthStatus: string;\n    fitnessLevel: number;\n}\n\ntype EmotionalState = {\n    happinessLevel: number;\n    stressLevel: number;\n}\n\ntype SpiritualBeliefs = {\n    religion?: string;\n    importance: number;\n}\n\n// Relationships and Events\ntype ChoiceConsequence = {\n    choiceMade: string;\n    outcome: string;\n}\n\ntype AgeRelatedEvent = {\n    age: number;\n    likelyEvents: LifeEvent[];\n}\n\ntype FinancialDecision = {\n    decisionType: string;\n    outcome: Finances;\n}\n\ntype HealthLifeSpan = {\n    healthChoices: string[];\n    expectedLifespan: number;\n}\n\n// Processes\nclass Simulation {\n    runSimulation(decadeChoice: DecadeChoice): LifeEvent[] {\n        // Method to run the simulation for the decade choice\n        return [];\n    }\n}\n\nclass Visualization {\n    createVisualization(roy: Roy): string {\n        // Method to create a visualization of Roy's life\n        return 'visualization_url';\n    }\n}\n\nclass NFTMinting {\n    mintNFT(visualization: string): NFT {\n        // Minting the NFT with the visualization\n        return new NFT(visualization);\n    }\n}\n\nclass NFT {\n    constructor(public visualization: string) { }\n}\n\n// Constraints (Typically expressed as business logic within methods)\n// ...\n\n// Goals\ntype LifeDiscovery = {\n    goalDescription: string;\n    pursueDiscovery(roy: Roy): void;\n}\n\ntype UniqueStorytelling = {\n    narrative: string;\n    generateStory(roy: Roy): string;\n}\n\n// Metrics\ntype MortalityRates = {\n    [age: number]: number; // Percentage chance of death at that age\n}\n\ntype IncarcerationRates = {\n    [choice: string]: number; // Chance of incarceration based on a choice\n}\n\ntype MarriageSuccess = {\n    yearsMarried: number;\n    successRate: number;\n}\n\ntype FinancialOutcomes = {\n    careerChoice: string;\n    averageEarnings: number;\n    bankruptcyRate: number;\n}\n\n// Decade Choice\ntype DecadeChoice = {\n    newYearsResolution: string;\n}\n// Update Roy's life events with the outcomes of the simulation\nexport type Sounds = {\n    spaceshipHum?: AudioBuffer | null;\n    spaceshipOn?: AudioBuffer | null;\n    holographicDisplay?: AudioBuffer | null;\n    warpSpeed?: AudioBuffer | null;\n    audioController: AudioController | null;\n};\n","x":-141,"y":60,"width":345,"height":430},
		{"id":"aeb94245fc1813dc","type":"text","text":"Your purpouse is to grade hackathon entries based on coherence. Hackathon entries are projects that aim to solve a problem using de-centralized science.","x":-94,"y":-560,"width":270,"height":200},
		{"chat_role":"assistant","id":"5bfcf580045cb30d","type":"text","text":"Ontology for Coherence Grading of Hackathon Entries:\n\nEntities:\n- Hackathon: A competition or event where participants present their projects aiming to solve a problem using decentralized science.\n- Entry: A project submitted by a participant in a hackathon.\n\nAttributes:\n- ProblemStatement: A description of the problem that the entry aims to solve.\n- SolutionDescription: A description of the solution proposed by the entry.\n- DecentralizedScienceUsage: The extent to which the entry utilizes decentralized science principles and technologies.\n- CoherenceLevel: The level of coherence between the problem statement, solution description, and decentralized science usage.\n\nRelationships and Events:\n- Participant: An individual or team participating in a hackathon.\n- Evaluation: The process of evaluating and grading an entry for coherence.\n\nProcesses:\n- EvaluationProcess: The process of evaluating an entry's coherence based on the problem statement, solution description, and decentralized science usage.\n  - evaluateCoherence(entry: Entry): CoherenceLevel - A method to evaluate and determine the coherence level of an entry.\n\nGoals:\n- CoherenceGradingGoal: The goal of grading hackathon entries for coherence.\n  - gradeEntryCoherence(entry: Entry): void - A method to grade the coherence level of an entry.\n\nMetrics:\n- CoherenceScore: A numerical score representing the coherence level of an entry.\n\nExample Usage:\n```typescript\n// Entities\ntype HackathonEntry = {\n    problemStatement: string;\n    solutionDescription: string;\n    decentralizedScienceUsage: number;\n    coherenceLevel: CoherenceScore;\n}\n\n// Relationships and Events\ntype Participant = {\n    name: string;\n    entries: HackathonEntry[];\n}\n\n// Processes\nclass EvaluationProcess {\n    evaluateCoherence(entry: HackathonEntry): CoherenceScore {\n        // Method to evaluate the coherence level of an entry\n        // ...\n        return coherenceScore;\n    }\n}\n\n// Goals\ntype CoherenceGradingGoal = {\n    gradeEntryCoherence(entry: HackathonEntry): void;\n}\n\n// Metrics\ntype CoherenceScore = number;\n\n// Usage\nconst evaluationProcess = new EvaluationProcess();\nconst coherenceGradingGoal: CoherenceGradingGoal = {\n    gradeEntryCoherence(entry: HackathonEntry): void {\n        entry.coherenceLevel = evaluationProcess.evaluateCoherence(entry);\n    }\n}\n\n// Evaluation example\nconst entry: HackathonEntry = {\n    problemStatement: \"Problem statement description\",\n    solutionDescription: \"Solution description\",\n    decentralizedScienceUsage: 0.8,\n    coherenceLevel: 0 // Initial coherence level\n}\n\ncoherenceGradingGoal.gradeEntryCoherence(entry);\nconsole.log(entry.coherenceLevel); // Output: The evaluated coherence level\n```\n\nNote: This is a simplified example of the ontology. You can further expand and refine the ontology based on specific requirements and additional attributes, relationships, or events relevant to your purpose of grading hackathon entries based on coherence.","x":360,"y":-260,"width":360,"height":1161,"color":"6"}
	],
	"edges":[
		{"id":"e2546961d4ad216a","fromNode":"bb2fd74cb8b13dbd","fromSide":"top","toNode":"0c74271427445fba","toSide":"bottom"},
		{"id":"ec8abb6e1f7a76be","fromNode":"aeb94245fc1813dc","fromSide":"bottom","toNode":"0c74271427445fba","toSide":"top"},
		{"id":"40c90f63e2f9680a","fromNode":"0c74271427445fba","fromSide":"bottom","toNode":"5bfcf580045cb30d","toSide":"top"},
		{"id":"1348104fa4ebde66","fromNode":"0c74271427445fba","fromSide":"bottom","toNode":"eff88b538e17d20c","toSide":"top"}
	]
}